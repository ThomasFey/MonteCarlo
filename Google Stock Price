#import necessary packages
import numpy as np
import math
import matplotlib.pyplot as plt
from pandas_datareader import data
from datetime import date, timedelta

#set up empty list to hold our ending values for each simulated price series
result = []

#download Google price data into DataFrame
tradingyear = date.today() - timedelta(days=365)
lasttradingyear = '{}/{}/{}'.format(tradingyear.month, tradingyear.day, tradingyear.year)
stock = input(str(print("What stock would you like to analyse: ")))
google = data.DataReader(stock, 'yahoo',start=lasttradingyear)

#calculate the compound annual growth rate (CAGR) which will give us our mean return input (mu) 
days = (google.index[-1] - google.index[0]).days
cagr = ((((google['Adj Close'][-1]) / google['Adj Close'][1])) ** (365.0/days)) - 1
print ('CAGR =',str(round(cagr,4)*100)+"%")
mu = cagr

#create a series of percentage returns and calculate the annual volatility of returns
google['Returns'] = google['Adj Close'].pct_change()
vol = google['Returns'].std()*math.sqrt(252)
print ("Annual Volatility =",str(round(vol,4)*100)+"%")

#Define Variables for starting stock price and number of trading days
S = google['Adj Close'][-1]
print("Starting stock price:", S)
T = 252
 
#number of runs to simulate = 1000
for i in range(1000):
    #create list of daily returns using random normal distribution
    daily_returns=np.random.normal(mu/T,vol/math.sqrt(T),T)+1
    
    #set starting price and create price series generated by above random daily returns
    price_list = [S]
    
    for x in daily_returns:
        price_list.append(price_list[-1]*x)
 
    #plot data from each individual run which we will plot at the end
    plt.plot(price_list)

    #append the ending value of each simulated run to the empty list we created at the beginning
    result.append(price_list[-1])
 
#numpy mean function to calculate the mean of the result
print("Expected Value:", round(np.mean(result),2))

#numpy median function to caalculate the median of the result
print("Median:", round(np.median(result),2))

#95% scope range
print("2.5% quantile =",np.percentile(result,2.5))
print("97.5% quantile =",np.percentile(result,97.5))

#show the plot of multiple price series created above
plt.show()

#create histogram of ending stock values for our mutliple simulations
plt.hist(result,bins=100)
plt.axvline(np.percentile(result,2.5), color='r', linestyle='dashed', linewidth=2)
plt.axvline(np.percentile(result,97.5), color='r', linestyle='dashed', linewidth=2)
plt.axvline(round(np.mean(result),2), color='black', linestyle=':', linewidth=2, label="Expected Value:" + str(round(np.mean(result),2)))
plt.axvline(round(np.median(result),2), color='black', linestyle='-', linewidth=2, label="Median:" + str(round(np.median(result),2)))
plt.legend(loc='upper right')
plt.show()

