#import necessary packages
import numpy as np
import math
import matplotlib.pyplot as plt
from pandas_datareader import data
from datetime import date, timedelta
import csv

#Analysis list with for all the analysed stocks
analysisList = []
analysisList.append(['Stock', 'CAGR', 'Volatility', 'Current stock price', 'Expected value', 'Median', '2.5% Quantile', '97.5% Quantile'])

#function to make a basic analysis of a stock based on a simulation running 1000 times
def stockAnalysis(stock):
    #set up empty list to hold our ending values for each simulated price series
    result = []
    returnList = []

    #download price data from a selcted stock into DataFrame
    tradingyear = date.today() - timedelta(days=365)
    lasttradingyear = '{}/{}/{}'.format(tradingyear.month, tradingyear.day, tradingyear.year)
    selectedStock = data.DataReader(stock, 'yahoo',start=lasttradingyear)
    returnList.append(stock)

    #calculate the compound annual growth rate (CAGR) which will give us our mean return input (mu) 
    days = (selectedStock.index[-1] - selectedStock.index[0]).days
    cagr = ((((selectedStock['Adj Close'][-1]) / selectedStock['Adj Close'][1])) ** (365.0/days)) - 1
    mu = cagr
    returnList.append(str(round(cagr,4)*100)+"%")

    #create a series of percentage returns and calculate the annual volatility of returns
    selectedStock['Returns'] = selectedStock['Adj Close'].pct_change()
    vol = selectedStock['Returns'].std()*math.sqrt(252)
    returnList.append(str(round(vol,4)*100)+"%")

    #Define Variables for starting stock price and number of trading days
    S = selectedStock['Adj Close'][-1]
    returnList.append(S)
    T = 252
    
    #number of runs to simulate = 1000
    for i in range(1000):
        #create list of daily returns using random normal distribution
        daily_returns=np.random.normal(mu/T,vol/math.sqrt(T),T)+1
        
        #set starting price and create price series generated by above random daily returns
        price_list = [S]
        
        for x in daily_returns:
            price_list.append(price_list[-1]*x)
    
        #plot data from each individual run which we will plot at the end
        plt.plot(price_list)

        #append the ending value of each simulated run to the empty list we created at the beginning
        result.append(price_list[-1])
    
    #numpy mean function to calculate the mean of the result
    returnList.append((round(np.mean(result),2)))

    #numpy median function to caalculate the median of the result
    returnList.append(round(np.median(result),2))

    #95% scope range
    returnList.append(np.percentile(result,2.5))
    returnList.append(np.percentile(result,97.5))

    #show the plot of multiple price series created above
    plt.clf()

    #create histogram of ending stock values for our mutliple simulations
    plt.hist(result,bins=100)
    plt.axvline(np.percentile(result,2.5), color='r', linestyle='dashed', linewidth=2)
    plt.axvline(np.percentile(result,97.5), color='r', linestyle='dashed', linewidth=2)
    plt.axvline(round(np.mean(result),2), color='black', linestyle=':', linewidth=2, label="Expected Value:" + str(round(np.mean(result),2)))
    plt.axvline(round(np.median(result),2), color='black', linestyle='-', linewidth=2, label="Median:" + str(round(np.median(result),2)))
    plt.legend(loc='upper right')
    plt.show()

    return returnList

#NASDAQ and S&P500 Analysis for refereence
analysisList.append(stockAnalysis('^IXIC'))
analysisList.append(stockAnalysis('^GSPC'))

#Asking how many stocks need to be analysed
amountOfStocks = input(print("How many stocks would you like to analyse: "))

#Making the stock analysis for the requested amount of stocks
for x in range(0,int(amountOfStocks)):
    stock = input(str(print("What stock would you like to analyse (i.e. AAPL, FB, AMZN, NFLX, TSLA, GOOG): ")))
    analysisList.append(stockAnalysis(stock))

#Create a csv document with the stocks data
with open('stocks.csv', 'w') as csvfile:
    filewriter = csv.writer(csvfile)
    filewriter.writerows(analysisList)

csvfile.close()
